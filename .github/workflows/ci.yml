name: CI

on: [push]

jobs:
  build_and_test_ubuntu:
    strategy:
     matrix:
        platform: [ubuntu-18.04]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install system dependencies (Ubuntu 18.04)
      if: matrix.platform == 'ubuntu-18.04'
      run: |
        sudo apt install -y libpython3.7 python3-pip python3-setuptools
        sudo pip3 install networkx pytest pyopenssl sphinx
        mkdir ~/memgraph
        curl -L https://memgraph.com/download/memgraph/v1.2.0/ubuntu-18.04/memgraph_1.2.0-community-1_amd64.deb > ~/memgraph/memgraph_1.2.0-community-1_amd64.deb
        sudo ln -s /dev/null /etc/systemd/system/memgraph.service # Prevents Memgraph from starting.
        sudo dpkg -i ~/memgraph/memgraph_1.2.0-community-1_amd64.deb

    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install, test and build docs
      run: |
        sudo python3 setup.py install
        MEMGRAPH_PORT=10000 python3 -m pytest
        cd docs
        make html

  build_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include: [
          { mingw_arch: "64", msys_arch: x86_64, mgversion: "1.4.0", python_arch: "x64", python_version: "3.8", python_abi_version: "cp36"},
          { mingw_arch: "32", msys_arch: i686, mgversion: "1.4.0", python_arch: "x86", python_version: "3.8", python_abi_version: "cp36"}
        ]
    env:
      CC: "C:\\msys64\\ming${{ matrix.mingw_arch }}\\bin\\gcc"
      CXX: "C:\\msys64\\ming${{ matrix.mingw_arch }}\\bin\\g++"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.python_arch }}
      - run: python -m pip install -U pip wheel setuptools
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW${{ matrix.mingw_arch }}
          update: true
          install: git mingw-w64-${{ matrix.msys_arch }}-toolchain mingw-w64-${{ matrix.msys_arch }}-cmake mingw-w64-${{ matrix.msys_arch }}-openssl
      - name: Add ming${{ matrix.mingw_arch }} to PATH
        run: |
          # First make sure python would resolve to the windows native python, not mingw one
          echo "C:/msys64/ming${{ matrix.mingw_arch }}/bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "${{ env.pythonLocation }}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
      - name: Fix gcc
        run: choco uninstall mingw -y
      - name: Build pymgclient
        run: python setup.py bdist_wheel --py-limited-api=${{ matrix.python_abi_version }}
      - name: Save wheel package
        uses: actions/upload-artifact@v2
        with:
          name: "Windows ${{matrix.python_arch}} wheel"
          path: pymgclient*.whl
