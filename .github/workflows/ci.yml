name: CI

on: [push]

jobs:
  build_and_test_ubuntu:
    strategy:
     matrix:
        platform: [ubuntu-18.04]
        mgversion:
          - 1.2.0
          - 1.3.0
          - 1.4.0
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Cache Memgraph community installer
      id: cache-memgraph-community
      uses: actions/cache@v1
      with:
        path: ~/memgraph
        key: cache-memgraph-v${{ matrix.mgversion }}-community-installer
    - name: Download Memgraph
      if: steps.cache-memgraph-community.outputs.cache-hit != 'true'
      run: |
        mkdir ~/memgraph
        curl -L https://download.memgraph.com/memgraph/v${{ matrix.mgversion }}/ubuntu-18.04/memgraph_${{ matrix.mgversion }}-community-1_amd64.deb > ~/memgraph/memgraph-community.deb
    - name: Install system dependencies (Ubuntu 18.04)
      run: |
        sudo apt install -y libpython3.7 python3-pip python3-setuptools
        python3 -m pip install --upgrade
        sudo pip3 install networkx pytest pyopenssl sphinx
        sudo ln -s /dev/null /etc/systemd/system/memgraph.service # Prevents Memgraph from starting.
        sudo dpkg -i ~/memgraph/memgraph-community.deb
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build source distribution
      run: python3 setup.py sdist
    - name: Install pymgclient
      run: python3 -m pip install ./dist/pymgclient-*
    - name: Run tests
      run: MEMGRAPH_PORT=10000 python3 -m pytest
    - name: Build docs
      run: |
        cd docs
        make html
    - name: Save source distribution package
      uses: actions/upload-artifact@v2
      with:
        name: pymgclient
        path: dist/

  build_windows_and_test:
    runs-on: windows-latest
    strategy:
      matrix:
        arch:
          - { mingw: "64", msys: x86_64, python: "x64"}
        python_version:
          - 3.6
          - 3.9
        mgversion:
          - 1.4.0
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.arch.python }}
      - run: python -m pip install -U pip wheel setuptools pytest pyopenssl
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW${{ matrix.arch.mingw }}
          update: true
          install: git mingw-w64-${{ matrix.arch.msys }}-toolchain mingw-w64-${{ matrix.arch.msys }}-cmake mingw-w64-${{ matrix.arch.msys }}-openssl
      - name: Add mingw${{ matrix.arch.mingw }} to PATH
        run: |
          # First make sure python would resolve to the windows native python, not mingw one
          echo "C:/msys64/mingw${{ matrix.arch.mingw }}/bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          echo "${{ env.pythonLocation }}" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
      - uses: Vampire/setup-wsl@v1
        with:
            distribution: Ubuntu-18.04
      - name: Download, install and run Memgraph under WSL
        shell: wsl-bash {0} # root shell
        run: |
          mkdir ~/memgraph
          curl -L https://download.memgraph.com/memgraph/v${{matrix.mgversion}}/ubuntu-18.04/memgraph_${{matrix.mgversion}}-community-1_amd64.deb --output ~/memgraph/memgraph-community.deb
          dpkg -i ~/memgraph/memgraph-community.deb
          openssl req -x509 -newkey rsa:4096 -days 3650 -nodes -keyout key.pem -out cert.pem -subj "/C=GB/ST=London/L=London/O=Testing Corp./CN=PymgclientTest"
          nohup /usr/lib/memgraph/memgraph --bolt-port 7687 --bolt-cert-file="cert.pem" --bolt-key-file="key.pem" --data-directory="~/memgraph/data" --storage-properties-on-edges=true --storage-snapshot-interval-sec=0 --storage-wal-enabled=false --storage-recover-on-startup=false --storage-snapshot-on-exit=false --telemetry-enabled=false --log-file='' &
          sleep 1 # Wait for Memgraph a bit.
      - name: Remove chocolatey gcc
        run: |
          # The python build command should be executed in the general windows shell where the choco-installed mingw conflicts with
          # the mingw installed by setup-msys action, because they are both in the PATH.
          choco uninstall mingw -y
      - name: Build pymgclient
        run: python setup.py bdist_wheel
      - name: Install pymgclient
        run: python -m pip install -f dist --no-index pymgclient
      - name: Run tests
        run: python -m pytest -v
        env:
          MEMGRAPH_HOST: 'localhost'
          MEMGRAPH_STARTED_WITH_SSL:
      - name: Save wheel package
        uses: actions/upload-artifact@v2
        with:
          name: pymgclient-win${{ matrix.arch.mingw }}-${{ matrix.python_version }}
          path: dist/

  build_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python_version:
          - 3.7
          - 3.9
    env:
      PYTHON_EXECUTABLE: /usr/local/opt/python@${{ matrix.python_version }}/bin/python3
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install python and OpenSSL
        run: |
          brew install python@${{ matrix.python_version }} openssl@1.1
      - name: Install pytest and pyopenssl
        run: ${{ env.PYTHON_EXECUTABLE }} -m pip install pyopenssl pytest
      - name: Build pymgclient
        run: ${{ env.PYTHON_EXECUTABLE }} setup.py bdist_wheel
      - name: Install pymgclient
        run: ${{ env.PYTHON_EXECUTABLE }} -m pip install -f dist --no-index pymgclient
      - name: Import mgclient to validate installation
        run: ${{ env.PYTHON_EXECUTABLE }} -c "import mgclient"
      - name: Save wheel package
        uses: actions/upload-artifact@v2
        with:
          name: pymgclient-macos-${{ matrix.python_version }}
          path: dist/
